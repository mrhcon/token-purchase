use anchor_lang::prelude::*;
use anchor_spl::token::{self, Mint, Token, TokenAccount, Transfer};
use anchor_spl::associated_token::AssociatedToken;
use solana_program::instruction::{AccountMeta, Instruction as SolanaInstruction};
use solana_program::program::{invoke, invoke_signed};

declare_id!("9HgVgT5AQ9WdCcZPMgzG8j26892YBjvHFEFL33xk4tb7");

#[program]
pub mod token_purchase {
    use super::*;

    pub fn create_purchase_transaction(
        ctx: Context<CreatePurchaseTransaction>,
        sol_amount: u64, // SOL amount in lamports
        lock_duration_months: u8,
    ) -> Result<()> {
        // Validate input
        if ![1, 3, 6, 12].contains(&lock_duration_months) {
            return err!(ErrorCode::InvalidLockDuration);
        }

        if sol_amount == 0 {
            return err!(ErrorCode::InvalidAmount);
        }

        // ... Rest of your logic ...
        
        msg!("Transaction successfully created and executed");
        Ok(())
    }

    pub fn complete_purchase(
        ctx: Context<CompletePurchase>,
        sol_amount: u64,
        lock_duration_months: u8,
        transaction_signature: String,
    ) -> Result<()> {
        // ... Transaction completion logic ...
        
        msg!("Purchase completion recorded");
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(sol_amount: u64, lock_duration_months: u8)]
pub struct CreatePurchaseTransaction<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    
    #[account(mut)]
    pub admin: Signer<'info>,
    
    /// CHECK: Treasury account is validated by the program logic
    #[account(mut)]
    pub treasury: AccountInfo<'info>,
    
    pub community_mint: Account<'info, Mint>,
    
    #[account(
        mut,
        associated_token::mint = community_mint,
        associated_token::authority = admin,
    )]
    pub admin_token_account: Account<'info, TokenAccount>,
    
    #[account(
        init_if_needed,
        payer = user,
        associated_token::mint = community_mint,
        associated_token::authority = user,
    )]
    pub user_token_account: Account<'info, TokenAccount>,
    
    // Governance-related accounts
    /// CHECK: Realm account is checked by the governance program
    pub realm: AccountInfo<'info>,
    
    /// CHECK: Realm config account is checked by the governance program
    pub realm_config: AccountInfo<'info>,
    
    /// CHECK: Governing token holding account is checked by the governance program
    #[account(mut)]
    pub governing_token_holding: AccountInfo<'info>,
    
    #[account(
        init_if_needed,
        payer = user,
        associated_token::mint = community_mint,
        associated_token::authority = governing_token_holding,
    )]
    pub governance_token_account: Account<'info, TokenAccount>,
    
    /// CHECK: Token owner record is created by the governance program
    #[account(mut)]
    pub token_owner_record: AccountInfo<'info>,
    
    // Programs
    pub system_program: Program<'info, System>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    
    /// CHECK: Governance program is hardcoded in constants
    pub governance_program: AccountInfo<'info>,
}

#[derive(Accounts)]
#[instruction(sol_amount: u64, lock_duration_months: u8, transaction_signature: String)]
pub struct CompletePurchase<'info> {
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[error_code]
pub enum ErrorCode {
    #[msg("Invalid lock duration. Must be 1, 3, 6, or 12 months.")]
    InvalidLockDuration,
    
    #[msg("Invalid amount. Amount must be greater than 0.")]
    InvalidAmount,
    
    #[msg("Insufficient token balance in treasury.")]
    InsufficientTreasuryBalance,
}
